
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/script/currency/weixin_ty.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6684fPnjAdE14SEnHnw42zn', 'weixin_ty');
// script/currency/weixin_ty.js

"use strict";

var wxcur = {
  webserver: '',
  POPUPFLAG: true,
  butshare: {
    butsharetxt: '',
    butshareimageUrl: '',
    butsharequery: '',
    shareAppType: ''
  },
  init: function init(data) {
    wx.showShareMenu({
      withShareTicket: true
    });
  },
  popup: function popup(node, popupBg) {
    var _this = this;

    if (popupBg === void 0) {
      popupBg = true;
    }

    console.log(this.POPUPFLAG);
    if (!this.POPUPFLAG) return;
    this.POPUPFLAG = false;
    node.active = !node.active;

    if (popupBg) {
      var bg = node.parent.getChildByName('bg');
      bg.active = !bg.active;
    }

    if (!node.active) {
      this.POPUPFLAG = true;
    }

    var scale = node.scale;

    if (node.active) {
      node.scale = 0;
      node.runAction(cc.sequence(cc.scaleTo(0.2, scale), cc.callFunc(function () {
        _this.POPUPFLAG = true;
      })));
    }
  },
  deepCopy: function deepCopy(data) {
    var type = Object.prototype.toString.call(data);

    if (type == "[object Array]") {
      var obj = [];

      for (var i = 0; i < data.length; i++) {
        obj.push(this.deepCopy(data[i]));
      }

      return obj;
    } else if (type == "[object Object]") {
      var _obj = {};

      for (var _i in data) {
        _obj[_i] = this.deepCopy(data[_i]);
      }

      return _obj;
    } else {
      return data;
    }
  },
  ajax: function ajax(url, data, method, header) {
    if (data === void 0) {
      data = {};
    }

    if (method === void 0) {
      method = 'GET';
    }

    if (header === void 0) {
      header = {
        'content-type': 'application/json'
      };
    }

    var that = this;
    return new Promise(function (resolve, reject) {
      wx.request({
        url: that.webserver + url,
        data: data,
        method: method,
        header: header,
        success: function success(res) {
          resolve(res.data);
        },
        fail: function fail(err) {
          reject(err);
        }
      });
    });
  },
  author: function author(zuobiao) {
    if (zuobiao === void 0) {
      zuobiao = {
        left: 0,
        top: 0,
        width: wx.getSystemInfoSync().windowWidth,
        height: wx.getSystemInfoSync().windowHeight
      };
    }

    var that = this;
    return new Promise(function (resolve, reject) {
      wx.getSetting({
        success: function success(res) {
          console.log(res);

          if (res.authSetting["scope.userInfo"]) {
            resolve(res);
            return;
          } // 授权BUTTON


          if (that.button) {
            that.button.hide();
          }

          var button = that.button = wx.createUserInfoButton({
            type: 'text',
            text: '',
            style: {
              left: zuobiao.left,
              top: zuobiao.top,
              width: zuobiao.width,
              height: zuobiao.height
            }
          });
          button.onTap(function (res) {
            console.log(res);

            if (res.errMsg == 'getUserInfo:ok') {
              resolve(res);
            } else {
              reject(res);
            }

            button.hide();
          });
        }
      });
    });
  },
  wx_login: function wx_login() {
    return new Promise(function (resolve, reject) {
      wx.login({
        success: function success(res) {
          resolve(res);
        },
        fail: function fail(err) {
          reject(err);
        }
      });
    });
  },
  share: function share(data) {
    if (data === void 0) {
      data = this.butshare;
    }

    wx.shareAppMessage({
      title: data.butsharetxt,
      imageUrl: data.butshareimageUrl,
      query: data.butsharequery,
      shareAppType: data.shareAppType,
      success: data.success ? data.success : function () {},
      fail: data.fail ? data.fail : function () {}
    });
  },
  shareQQZone: function shareQQZone(data) {
    if (data === void 0) {
      data = this.butshare;
    }

    wx.shareAppMessage({
      title: data.butsharetxt,
      imageUrl: data.butshareimageUrl,
      query: data.butsharequery,
      shareAppType: 'qzone',
      success: data.success ? data.success : function () {},
      fail: data.fail ? data.fail : function () {}
    });
  },
  righttopshare: function righttopshare(data) {
    if (data === void 0) {
      data = this.butshare;
    }

    return {
      title: data.butsharetxt,
      imageUrl: data.butshareimageUrl,
      query: data.butsharequery
    };
  },
  getwxurl: function getwxurl(url) {
    return new Promise(function (resolve, reject) {
      cc.loader.load(url + '?aaa=aa.jpg', function (err, texture) {
        if (err) {
          console.log(err, "err");
          reject(err);
          return;
        }

        resolve(texture);
      });
    });
  },
  getByteLen: function getByteLen(val, num) {
    if (num === void 0) {
      num = 10;
    }

    //获取字节长度
    var len = 0;
    var cl = '';

    for (var i = 0; i < val.length; i++) {
      if (len >= num) {
        return cl + '...';
      }

      var a = val.charAt(i);

      if (a.match(/[^\x00-\xff]/ig) != null) {
        len += 2;
      } else {
        len += 1;
      }

      cl += a;
    }

    return cl;
  },
  getByteLength: function getByteLength(val) {
    var len = 0;

    for (var i = 0; i < val.length; i++) {
      var a = val.charAt(i);

      if (a.match(/[^\x00-\xff]/ig) != null) {
        len += 2;
      } else {
        len += 1;
      }
    }

    return len;
  },
  getAngle: function getAngle(px, py, mx, my) {
    //获得人物中心和鼠标坐标连线，与y轴正半轴之间的夹角
    var x = Math.abs(px - mx);
    var y = Math.abs(py - my);
    var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    var cos = y / z;
    var radina = Math.acos(cos); //用反三角函数求弧度

    var angle = Math.floor(180 / (Math.PI / radina)); //将弧度转换成角度

    if (mx > px && my < py) {
      //鼠标在第四象限
      angle = 180 - angle;
    }

    if (mx == px && my < py) {
      //鼠标在y轴正方向上
      angle = 180;
    }

    if (mx == px && my > py) {
      //鼠标在y轴负方向上
      angle = 360;
    }

    if (mx > px && my == py) {
      //鼠标在x轴正方向上
      angle = 90;
    }

    if (mx < px && my < py) {
      //鼠标在第三象限
      angle = 180 + angle;
    }

    if (mx < px && my == py) {
      //鼠标在x轴负方向
      angle = 270;
    }

    if (mx < px && my > py) {
      //鼠标在第二象限
      angle = 360 - angle;
    }

    return angle;
  },
  // 金币正转换
  digitalConversion: function digitalConversion(num, xsd) {
    if (xsd === void 0) {
      xsd = 2;
    }

    num = Number(num);

    if (num < 1e+3) {
      num = num.toFixed(0);
    } else if (num < 1e+6) {
      num = (num / 1e+3).toFixed(xsd) + 'K';
    } else if (num < 1e+9) {
      num = (num / 1e+6).toFixed(xsd) + 'M';
    } else if (num < 1e+12) {
      num = (num / 1e+9).toFixed(xsd) + 'B';
    } else if (num < 1e+15) {
      num = (num / 1e+12).toFixed(xsd) + 'T';
    } else if (num < 1e+18) {
      num = (num / 1e+15).toFixed(xsd) + 'P';
    } else if (num < 1e+21) {
      num = (num / 1e+18).toFixed(xsd) + 'E';
    } else if (num < 1e+24) {
      num = (num / 1e+21).toFixed(xsd) + 'Z';
    } else if (num < 1e+27) {
      num = (num / 1e+24).toFixed(xsd) + 'Y';
    } else {
      num = (num / 1e+27).toFixed(xsd) + 'S';
    }

    return num;
  },
  setNodeBool: function setNodeBool(num, prefab) {
    var enemyPool = new cc.NodePool();

    for (var i = 0; i < num; ++i) {
      enemyPool.put(cc.instantiate(prefab));
    }

    return enemyPool;
  },
  getNodeBool: function getNodeBool(NodePool, Prefab) {
    var enemy = null;

    if (NodePool.size() > 0) {
      enemy = NodePool.get();
    } else {
      enemy = cc.instantiate(Prefab);
    }

    return enemy;
  },
  is_WECHAT_GAME: function is_WECHAT_GAME() {
    return cc.sys.platform === cc.sys.WECHAT_GAME;
  }
};
module.exports = {
  wxcur: wxcur
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHQvY3VycmVuY3kvd2VpeGluX3R5LmpzIl0sIm5hbWVzIjpbInd4Y3VyIiwid2Vic2VydmVyIiwiUE9QVVBGTEFHIiwiYnV0c2hhcmUiLCJidXRzaGFyZXR4dCIsImJ1dHNoYXJlaW1hZ2VVcmwiLCJidXRzaGFyZXF1ZXJ5Iiwic2hhcmVBcHBUeXBlIiwiaW5pdCIsImRhdGEiLCJ3eCIsInNob3dTaGFyZU1lbnUiLCJ3aXRoU2hhcmVUaWNrZXQiLCJwb3B1cCIsIm5vZGUiLCJwb3B1cEJnIiwiY29uc29sZSIsImxvZyIsImFjdGl2ZSIsImJnIiwicGFyZW50IiwiZ2V0Q2hpbGRCeU5hbWUiLCJzY2FsZSIsInJ1bkFjdGlvbiIsImNjIiwic2VxdWVuY2UiLCJzY2FsZVRvIiwiY2FsbEZ1bmMiLCJkZWVwQ29weSIsInR5cGUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJvYmoiLCJpIiwibGVuZ3RoIiwicHVzaCIsImFqYXgiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXIiLCJ0aGF0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0Iiwic3VjY2VzcyIsInJlcyIsImZhaWwiLCJlcnIiLCJhdXRob3IiLCJ6dW9iaWFvIiwibGVmdCIsInRvcCIsIndpZHRoIiwiZ2V0U3lzdGVtSW5mb1N5bmMiLCJ3aW5kb3dXaWR0aCIsImhlaWdodCIsIndpbmRvd0hlaWdodCIsImdldFNldHRpbmciLCJhdXRoU2V0dGluZyIsImJ1dHRvbiIsImhpZGUiLCJjcmVhdGVVc2VySW5mb0J1dHRvbiIsInRleHQiLCJzdHlsZSIsIm9uVGFwIiwiZXJyTXNnIiwid3hfbG9naW4iLCJsb2dpbiIsInNoYXJlIiwic2hhcmVBcHBNZXNzYWdlIiwidGl0bGUiLCJpbWFnZVVybCIsInF1ZXJ5Iiwic2hhcmVRUVpvbmUiLCJyaWdodHRvcHNoYXJlIiwiZ2V0d3h1cmwiLCJsb2FkZXIiLCJsb2FkIiwidGV4dHVyZSIsImdldEJ5dGVMZW4iLCJ2YWwiLCJudW0iLCJsZW4iLCJjbCIsImEiLCJjaGFyQXQiLCJtYXRjaCIsImdldEJ5dGVMZW5ndGgiLCJnZXRBbmdsZSIsInB4IiwicHkiLCJteCIsIm15IiwieCIsIk1hdGgiLCJhYnMiLCJ5IiwieiIsInNxcnQiLCJwb3ciLCJjb3MiLCJyYWRpbmEiLCJhY29zIiwiYW5nbGUiLCJmbG9vciIsIlBJIiwiZGlnaXRhbENvbnZlcnNpb24iLCJ4c2QiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwic2V0Tm9kZUJvb2wiLCJwcmVmYWIiLCJlbmVteVBvb2wiLCJOb2RlUG9vbCIsInB1dCIsImluc3RhbnRpYXRlIiwiZ2V0Tm9kZUJvb2wiLCJQcmVmYWIiLCJlbmVteSIsInNpemUiLCJnZXQiLCJpc19XRUNIQVRfR0FNRSIsInN5cyIsInBsYXRmb3JtIiwiV0VDSEFUX0dBTUUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLEtBQUssR0FBRztBQUNWQyxFQUFBQSxTQUFTLEVBQUUsRUFERDtBQUVWQyxFQUFBQSxTQUFTLEVBQUUsSUFGRDtBQUdWQyxFQUFBQSxRQUFRLEVBQUU7QUFDTkMsSUFBQUEsV0FBVyxFQUFFLEVBRFA7QUFFTkMsSUFBQUEsZ0JBQWdCLEVBQUUsRUFGWjtBQUdOQyxJQUFBQSxhQUFhLEVBQUUsRUFIVDtBQUlOQyxJQUFBQSxZQUFZLEVBQUU7QUFKUixHQUhBO0FBU1ZDLEVBQUFBLElBVFUsZ0JBU0xDLElBVEssRUFTQztBQUNQQyxJQUFBQSxFQUFFLENBQUNDLGFBQUgsQ0FBaUI7QUFDYkMsTUFBQUEsZUFBZSxFQUFFO0FBREosS0FBakI7QUFHSCxHQWJTO0FBY1ZDLEVBQUFBLEtBZFUsaUJBY0pDLElBZEksRUFjRUMsT0FkRixFQWNrQjtBQUFBOztBQUFBLFFBQWhCQSxPQUFnQjtBQUFoQkEsTUFBQUEsT0FBZ0IsR0FBTixJQUFNO0FBQUE7O0FBQ3hCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLZixT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RCxDQUEzQixFQUE4QjtBQUMxQmdGLE1BQUFBLFNBQVMsQ0FBQ0UsR0FBVixDQUFjN0YsRUFBRSxDQUFDOEYsV0FBSCxDQUFlSixNQUFmLENBQWQ7QUFDSDs7QUFDRCxXQUFPQyxTQUFQO0FBQ0gsR0EvUFM7QUFnUVZJLEVBQUFBLFdBaFFVLHVCQWdRRUgsUUFoUUYsRUFnUVlJLE1BaFFaLEVBZ1FvQjtBQUMxQixRQUFJQyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxRQUFJTCxRQUFRLENBQUNNLElBQVQsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDckJELE1BQUFBLEtBQUssR0FBR0wsUUFBUSxDQUFDTyxHQUFULEVBQVI7QUFDSCxLQUZELE1BRU87QUFDSEYsTUFBQUEsS0FBSyxHQUFHakcsRUFBRSxDQUFDOEYsV0FBSCxDQUFlRSxNQUFmLENBQVI7QUFDSDs7QUFDRCxXQUFPQyxLQUFQO0FBQ0gsR0F4UVM7QUF5UVZHLEVBQUFBLGNBelFVLDRCQXlRTztBQUNiLFdBQU9wRyxFQUFFLENBQUNxRyxHQUFILENBQU9DLFFBQVAsS0FBb0J0RyxFQUFFLENBQUNxRyxHQUFILENBQU9FLFdBQWxDO0FBQ0g7QUEzUVMsQ0FBZDtBQTZRQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQUVqSSxFQUFBQSxLQUFLLEVBQUxBO0FBQUYsQ0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5jb25zdCB3eGN1ciA9IHtcbiAgICB3ZWJzZXJ2ZXI6ICcnLFxuICAgIFBPUFVQRkxBRzogdHJ1ZSxcbiAgICBidXRzaGFyZToge1xuICAgICAgICBidXRzaGFyZXR4dDogJycsXG4gICAgICAgIGJ1dHNoYXJlaW1hZ2VVcmw6ICcnLFxuICAgICAgICBidXRzaGFyZXF1ZXJ5OiAnJyxcbiAgICAgICAgc2hhcmVBcHBUeXBlOiAnJyxcbiAgICB9LFxuICAgIGluaXQoZGF0YSkge1xuICAgICAgICB3eC5zaG93U2hhcmVNZW51KHtcbiAgICAgICAgICAgIHdpdGhTaGFyZVRpY2tldDogdHJ1ZVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgcG9wdXAobm9kZSwgcG9wdXBCZyA9IHRydWUpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5QT1BVUEZMQUcpXG4gICAgICAgIGlmICghdGhpcy5QT1BVUEZMQUcpIHJldHVybjtcbiAgICAgICAgdGhpcy5QT1BVUEZMQUcgPSBmYWxzZTtcbiAgICAgICAgbm9kZS5hY3RpdmUgPSAhbm9kZS5hY3RpdmU7XG5cbiAgICAgICAgaWYgKHBvcHVwQmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGJnID0gbm9kZS5wYXJlbnQuZ2V0Q2hpbGRCeU5hbWUoJ2JnJyk7XG4gICAgICAgICAgICBiZy5hY3RpdmUgPSAhYmcuYWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFub2RlLmFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5QT1BVUEZMQUcgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY2FsZSA9IG5vZGUuc2NhbGU7XG5cbiAgICAgICAgaWYgKG5vZGUuYWN0aXZlKSB7XG4gICAgICAgICAgICBub2RlLnNjYWxlID0gMDtcbiAgICAgICAgICAgIG5vZGUucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLnNjYWxlVG8oMC4yLCBzY2FsZSksIGNjLmNhbGxGdW5jKCgpID0+IHsgdGhpcy5QT1BVUEZMQUcgPSB0cnVlIH0pKSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlZXBDb3B5KGRhdGEpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKTtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG9iai5wdXNoKHRoaXMuZGVlcENvcHkoZGF0YVtpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgb2JqW2ldID0gdGhpcy5kZWVwQ29weShkYXRhW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWpheCh1cmwsIGRhdGEgPSB7fSwgbWV0aG9kID0gJ0dFVCcsIGhlYWRlciA9IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgd3gucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGF0LndlYnNlcnZlciArIHVybCxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIGhlYWRlcjogaGVhZGVyLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFpbChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIGF1dGhvcih6dW9iaWFvID0geyBsZWZ0OiAwLCB0b3A6IDAsIHdpZHRoOiB3eC5nZXRTeXN0ZW1JbmZvU3luYygpLndpbmRvd1dpZHRoLCBoZWlnaHQ6IHd4LmdldFN5c3RlbUluZm9TeW5jKCkud2luZG93SGVpZ2h0IH0pIHtcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB3eC5nZXRTZXR0aW5nKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHJlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuYXV0aFNldHRpbmdbXCJzY29wZS51c2VySW5mb1wiXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8g5o6I5p2DQlVUVE9OXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoYXQuYnV0dG9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYnV0dG9uLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9ICB0aGF0LmJ1dHRvbiA9IHd4LmNyZWF0ZVVzZXJJbmZvQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB6dW9iaWFvLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB6dW9iaWFvLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogenVvYmlhby53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHp1b2JpYW8uaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uVGFwKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmVyck1zZyA9PSAnZ2V0VXNlckluZm86b2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgd3hfbG9naW4oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB3eC5sb2dpbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzcyhyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFpbChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHNoYXJlKGRhdGEgPSB0aGlzLmJ1dHNoYXJlKSB7XG4gICAgICAgIHd4LnNoYXJlQXBwTWVzc2FnZSh7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS5idXRzaGFyZXR4dCxcbiAgICAgICAgICAgIGltYWdlVXJsOiBkYXRhLmJ1dHNoYXJlaW1hZ2VVcmwsXG4gICAgICAgICAgICBxdWVyeTogZGF0YS5idXRzaGFyZXF1ZXJ5LFxuICAgICAgICAgICAgc2hhcmVBcHBUeXBlOiBkYXRhLnNoYXJlQXBwVHlwZSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGRhdGEuc3VjY2VzcyA/IGRhdGEuc3VjY2VzcyA6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGZhaWw6IGRhdGEuZmFpbCA/IGRhdGEuZmFpbCA6IGZ1bmN0aW9uICgpIHsgfVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgc2hhcmVRUVpvbmUoZGF0YSA9IHRoaXMuYnV0c2hhcmUpIHtcbiAgICAgICAgd3guc2hhcmVBcHBNZXNzYWdlKHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLmJ1dHNoYXJldHh0LFxuICAgICAgICAgICAgaW1hZ2VVcmw6IGRhdGEuYnV0c2hhcmVpbWFnZVVybCxcbiAgICAgICAgICAgIHF1ZXJ5OiBkYXRhLmJ1dHNoYXJlcXVlcnksXG4gICAgICAgICAgICBzaGFyZUFwcFR5cGU6ICdxem9uZScsXG4gICAgICAgICAgICBzdWNjZXNzOiBkYXRhLnN1Y2Nlc3MgPyBkYXRhLnN1Y2Nlc3MgOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBmYWlsOiBkYXRhLmZhaWwgPyBkYXRhLmZhaWwgOiBmdW5jdGlvbiAoKSB7IH1cbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHJpZ2h0dG9wc2hhcmUoZGF0YSA9IHRoaXMuYnV0c2hhcmUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLmJ1dHNoYXJldHh0LFxuICAgICAgICAgICAgaW1hZ2VVcmw6IGRhdGEuYnV0c2hhcmVpbWFnZVVybCxcbiAgICAgICAgICAgIHF1ZXJ5OiBkYXRhLmJ1dHNoYXJlcXVlcnlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0d3h1cmwodXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjYy5sb2FkZXIubG9hZCh1cmwgKyAnP2FhYT1hYS5qcGcnLCBmdW5jdGlvbiAoZXJyLCB0ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIsIFwiZXJyXCIpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUodGV4dHVyZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgZ2V0Qnl0ZUxlbih2YWwsIG51bSA9IDEwKSB7IC8v6I635Y+W5a2X6IqC6ZW/5bqmXG4gICAgICAgIHZhciBsZW4gPSAwO1xuICAgICAgICB2YXIgY2wgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChsZW4gPj0gbnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsICsgJy4uLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IHZhbC5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpZiAoYS5tYXRjaCgvW15cXHgwMC1cXHhmZl0vaWcpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZW4gKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxlbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2wgKz0gYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2w7XG4gICAgfSxcbiAgICBnZXRCeXRlTGVuZ3RoKHZhbCkge1xuICAgICAgICB2YXIgbGVuID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhID0gdmFsLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmIChhLm1hdGNoKC9bXlxceDAwLVxceGZmXS9pZykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxlbiArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGVuICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlbjtcbiAgICB9LFxuICAgIGdldEFuZ2xlKHB4LCBweSwgbXgsIG15KSB7Ly/ojrflvpfkurrniankuK3lv4PlkozpvKDmoIflnZDmoIfov57nur/vvIzkuI556L205q2j5Y2K6L205LmL6Ze055qE5aS56KeSXG4gICAgICAgIHZhciB4ID0gTWF0aC5hYnMocHggLSBteCk7XG4gICAgICAgIHZhciB5ID0gTWF0aC5hYnMocHkgLSBteSk7XG4gICAgICAgIHZhciB6ID0gTWF0aC5zcXJ0KE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMikpO1xuICAgICAgICB2YXIgY29zID0geSAvIHo7XG4gICAgICAgIHZhciByYWRpbmEgPSBNYXRoLmFjb3MoY29zKTsvL+eUqOWPjeS4ieinkuWHveaVsOaxguW8p+W6plxuICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLmZsb29yKDE4MCAvIChNYXRoLlBJIC8gcmFkaW5hKSk7Ly/lsIblvKfluqbovazmjaLmiJDop5LluqZcblxuICAgICAgICBpZiAobXggPiBweCAmJiBteSA8IHB5KSB7Ly/pvKDmoIflnKjnrKzlm5vosaHpmZBcbiAgICAgICAgICAgIGFuZ2xlID0gMTgwIC0gYW5nbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG14ID09IHB4ICYmIG15IDwgcHkpIHsvL+m8oOagh+WcqHnovbTmraPmlrnlkJHkuIpcbiAgICAgICAgICAgIGFuZ2xlID0gMTgwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChteCA9PSBweCAmJiBteSA+IHB5KSB7Ly/pvKDmoIflnKh56L206LSf5pa55ZCR5LiKXG4gICAgICAgICAgICBhbmdsZSA9IDM2MDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXggPiBweCAmJiBteSA9PSBweSkgey8v6byg5qCH5ZyoeOi9tOato+aWueWQkeS4ilxuICAgICAgICAgICAgYW5nbGUgPSA5MDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXggPCBweCAmJiBteSA8IHB5KSB7Ly/pvKDmoIflnKjnrKzkuInosaHpmZBcbiAgICAgICAgICAgIGFuZ2xlID0gMTgwICsgYW5nbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG14IDwgcHggJiYgbXkgPT0gcHkpIHsvL+m8oOagh+WcqHjovbTotJ/mlrnlkJFcbiAgICAgICAgICAgIGFuZ2xlID0gMjcwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChteCA8IHB4ICYmIG15ID4gcHkpIHsvL+m8oOagh+WcqOesrOS6jOixoemZkFxuICAgICAgICAgICAgYW5nbGUgPSAzNjAgLSBhbmdsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbmdsZTtcbiAgICB9LFxuICAgIC8vIOmHkeW4geato+i9rOaNolxuICAgIGRpZ2l0YWxDb252ZXJzaW9uKG51bSwgeHNkID0gMikge1xuICAgICAgICBudW0gPSBOdW1iZXIobnVtKVxuICAgICAgICBpZiAobnVtIDwgMWUrMykge1xuICAgICAgICAgICAgbnVtID0gbnVtLnRvRml4ZWQoMClcbiAgICAgICAgfSBlbHNlIGlmIChudW0gPCAxZSs2KSB7XG4gICAgICAgICAgICBudW0gPSAobnVtIC8gMWUrMykudG9GaXhlZCh4c2QpICsgJ0snXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMWUrOSkge1xuICAgICAgICAgICAgbnVtID0gKG51bSAvIDFlKzYpLnRvRml4ZWQoeHNkKSArICdNJ1xuICAgICAgICB9IGVsc2UgaWYgKG51bSA8IDFlKzEyKSB7XG4gICAgICAgICAgICBudW0gPSAobnVtIC8gMWUrOSkudG9GaXhlZCh4c2QpICsgJ0InXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMWUrMTUpIHtcbiAgICAgICAgICAgIG51bSA9IChudW0gLyAxZSsxMikudG9GaXhlZCh4c2QpICsgJ1QnXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMWUrMTgpIHtcbiAgICAgICAgICAgIG51bSA9IChudW0gLyAxZSsxNSkudG9GaXhlZCh4c2QpICsgJ1AnXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMWUrMjEpIHtcbiAgICAgICAgICAgIG51bSA9IChudW0gLyAxZSsxOCkudG9GaXhlZCh4c2QpICsgJ0UnXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMWUrMjQpIHtcbiAgICAgICAgICAgIG51bSA9IChudW0gLyAxZSsyMSkudG9GaXhlZCh4c2QpICsgJ1onXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMWUrMjcpIHtcbiAgICAgICAgICAgIG51bSA9IChudW0gLyAxZSsyNCkudG9GaXhlZCh4c2QpICsgJ1knXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudW0gPSAobnVtIC8gMWUrMjcpLnRvRml4ZWQoeHNkKSArICdTJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1cbiAgICB9LFxuICAgIHNldE5vZGVCb29sKG51bSwgcHJlZmFiKSB7XG4gICAgICAgIGNvbnN0IGVuZW15UG9vbCA9IG5ldyBjYy5Ob2RlUG9vbCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgKytpKSB7XG4gICAgICAgICAgICBlbmVteVBvb2wucHV0KGNjLmluc3RhbnRpYXRlKHByZWZhYikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmVteVBvb2xcbiAgICB9LFxuICAgIGdldE5vZGVCb29sKE5vZGVQb29sLCBQcmVmYWIpIHtcbiAgICAgICAgbGV0IGVuZW15ID0gbnVsbDtcbiAgICAgICAgaWYgKE5vZGVQb29sLnNpemUoKSA+IDApIHtcbiAgICAgICAgICAgIGVuZW15ID0gTm9kZVBvb2wuZ2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmVteSA9IGNjLmluc3RhbnRpYXRlKFByZWZhYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuZW15O1xuICAgIH0sXG4gICAgaXNfV0VDSEFUX0dBTUUoKSB7XG4gICAgICAgIHJldHVybiBjYy5zeXMucGxhdGZvcm0gPT09IGNjLnN5cy5XRUNIQVRfR0FNRTtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHsgd3hjdXIgfSJdfQ==